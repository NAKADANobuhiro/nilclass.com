---
permalink: "courses-content/how-websites-work.json"
---

# How Websites Work.
{
    "diagramStep" : "start",
    "focus" : "You"
}

We all love browsing web sites because they are super useful and fun!
But where does a web-page come from? How does it get created?

Follow along as we go behind the scenes and visually explore how web sites work from personal blogs to massive sites like <a href="http://www.amazon.com/">Amazon.com</a>.


# Web pages are viewed using a software-progam called a web-browser.
{
    "diagramStep" : "web-browser",
    "focus" : "Web Browser",
    "focusPath" : ["You", "Web Browser"]
}

# Web browsers run on your laptop or smartphone just like Excel or Photoshop.
{
    "diagramStep" : "web-browser-platforms",
    "focus" : ["Laptop", "Phone", "Tablet"]
}


# The web browser downloads content over the Internet.
{
    "diagramStep" : "internet",
    "focus" : "Internet",
    "focusPaths" : [
        ["You", "Laptop", "Internet", "HTML"],
        ["Internet", "Image"],
        ["Internet", "Video"]
    ]
}

# Web browsers can download and stream media like text, images, pdfs, movies, and music.
{
    "diagramStep" : "internet",
    "focus" : ["HTML", "Image", "Video"]
}

# This content is stored on other computers called servers.
{
    "diagramStep" : "server",
    "focus" : "Server"
}

# A server is just a computer. It contains files in its filesystem just like the files and folders on your personal computer.
{
    "diagramStep" : "server",
    "focus" : "Filesystem"
}

# Technically, this entire network of computers is the Internet. The Internet icon simply illustrates connections within the network.
{
    "diagramStep" : "server",
    "focus" : ["Phone", "Laptop", "Tablet", "Internet", "Server"]
}


# Servers that accept Internet requests are called Web Servers.
{
    "diagramStep" : "server",
    "focus" : "Server",
    "focusPath" : ["You", "Laptop", "Internet", "Server"]
}

# To accept Internet requests, the server runs a software program called a web-server.
{
    "diagramStep" : "static-server",
    "focus" : "Web Server"
}

# The web-server software dictates which files and programs are OK to be accessed from the Internet.
{
    "diagramStep" : "static-server",
    "focusPaths" : [
        ["You", "Laptop", "Internet", "Server", "Web Server", "Filesystem"],
        ["Filesystem", "HTML"],
        ["Filesystem", "Image"]
    ],
    "disable" : ["Video"]
}

# Servers have private files that should never be web accessible ...
{
    "diagramStep" : "security-gate",
    "focus" : ["Passwords", "Secrets"],
    "disable" : ["Passwords", "Secrets"]
}

# Therefore, web requests are handled only by the web-server acting as a kind of security gate.
{
    "diagramStep" : "security-gate",
    "focusPaths" : [
        ["You", "Laptop", "Internet", "Server", "Web Server"],
        ["Anna", "Phone", "Internet", "Server", "Web Server"]
    ],
    "disable" : ["Passwords", "Secrets"]
}

# All web pages are just text. Even media like images, and video are encoded and sent as text-based files.
{
    "diagramStep" : "security-gate",
    "focus" : ["HTML", "Video", "Image"],
    "disable" : ["Passwords", "Secrets"]
}

# When a request comes in, the server processes the request and sends back text that describes the web-page you see.
{
    "diagramStep" : "security-gate",
    "focusPaths" : [
        ["You", "Laptop", "Internet", "Server", "Web Server", "Filesystem"],
        ["Filesystem", "HTML"],
        ["Filesystem", "Image"],
        ["Filesystem", "Video"]
    ],
    "disable" : ["Passwords", "Secrets"]
}

# The simplest way to send this content to the user is for the web-server to retrieve it from its own filesystem.
{
    "diagramStep" : "security-gate",
    "focus" : ["Filesystem"],
    "focusPath" : ["You", "Laptop", "Internet", "Server", "Web Server", "Filesystem"],
    "disable" : ["Passwords", "Secrets"]
}

# Does that mean Amazon.com has millions of product pages stored as files?
{
    "diagramStep" : "static-server-amazon",
    "focus" : ["product-1","product-2","product-3","product-4"]
}

# Creating millions of product page files would take forever and be hard to maintain.
{
    "diagramStep" : "millions-pages"
}

# Updating the product page layout would require changing every single file!
{
    "diagramStep" : "millions-pages",
    "focus" : ["product-1","product-2","product-3","product-4", "product-5","product-6","product-7","product-8", "product-9","product-10","product-11","product-12"]
}

# A web application is a software program that can create pages on demand.
{
    "diagramStep" : "web-application",
    "focus" : ["Application"]
}

# The web server is configured to route requests to the web application instead of serving files directly.
{
    "diagramStep" : "web-application",
    "focus" : ["Web Server"],
    "focusPath" : ["Web Server", "Application"]
}


# Web applications can read from a template file and build a custom page dynamically.
{
    "diagramStep" : "templates",
    "focus" : ["Templates"],
    "focusPath" : ["Application", "Templates"]
}

# This means web pages don't actually have to exist, an application can create them as needed.
{
    "diagramStep" : "templates",
    "focus" : ["Application"]
}


# A web application can interact with a database.
{
    "diagramStep" : "database",
    "focus" : "Database",
    "focusPath" : ["Application", "Templates", "Database"]
}

# A database is a software program installed on the server that helps with efficiently storing and accessing data.
{
    "diagramStep" : "database",
    "focus" : "Database"
}

# We can use a database to store Amazon's millions of products as data: description, price, sizes, images.
{
    "diagramStep" : "database-data",
    "focus" : ["Product 1", "Product 2", "Product 3", "Product 4"],
    "focusPaths" : [
        ["Database", "Product 1"],
        ["Database", "Product 2"],
        ["Database", "Product 3"],
        ["Database", "Product 4"]
    ]
}

# The web application queries the database to populate its templates.
{
    "diagramStep" : "database-data",
    "focus" : "Templates",
    "focusPath" : ["Application", "Templates", "Database", "Product 1"]
}

# The product data is used to populate a page template that has placeholder values like {price}, {description}, etc.
{
    "diagramStep" : "database-data",
    "focus" : "Templates"
}

# Now if you want change the product template, you only have to change one file. =)
{
    "diagramStep" : "database-data",
    "focus" : "Templates"
}

# Our software programs have been running on one physical server. Each server has physical limits in how many requests it can handle.
{
    "diagramStep" : "database-data",
    "focus" : ["Server", "Web Server", "Database", "Application"]
}

# To handle more requests, or scale your application, you can move your database software to its own dedicated database server.
{
    "diagramStep" : "dedicated-database",
    "focus" : "Database Server"
}


# Now your app server can concentrate on serving web-requests,
{
    "diagramStep" : "dedicated-database",
    "focus" : "Server"
}

# While your database-server gets more computing power to manage the database.
{
    "diagramStep" : "dedicated-database",
    "focus" : "Database Server"
}


# One lonely server may be a bottleneck.
{
    "diagramStep" : "dedicated-database",
    "focus" : "Server"
}

# The application server is no longer handling the database load, but it is still solely responsible for **ALL** requests =/.
{
    "diagramStep" : "dedicated-database",
    "focus" : "Server",
    "focusPaths" : [
        ["Anna", "Phone Web Browser", "Phone", "Internet", "Server"],
        ["You", "Web Browser", "Laptop", "Internet", "Server"],
        ["Pinky", "Tablet Web Browser", "Tablet", "Internet", "Server"]
    ]
}


# We can help this poor server out by adding more of his friends to share the load.
{
    "diagramStep" : "multi-app-architecture",
    "focus" : ["Server", "Server (clone 1)", "Server (clone 2)"]
}

# Multiple application servers distribute the request load.
{
    "diagramStep" : "multi-app-architecture",
    "focusPaths" : [
        ["Anna", "Phone Web Browser", "Phone", "Internet", "Server (clone 2)"],
        ["You", "Web Browser", "Laptop", "Internet", "Server (clone 1)"],
        ["Pinky", "Tablet Web Browser", "Tablet", "Internet", "Server"]
    ]
}


# How do we send requests to the new servers?
{
    "diagramStep" : "multi-app-architecture",
    "focusPaths" : [
        ["Anna", "Phone Web Browser", "Phone", "Internet", "Server (clone 2)"],
        ["You", "Web Browser", "Laptop", "Internet", "Server (clone 1)"],
        ["Pinky", "Tablet Web Browser", "Tablet", "Internet", "Server"]
    ]
}

# A reverse-proxy server delegates requests across multiple application servers.
{
    "diagramStep" : "reverse-proxy",
    "focus" : "Reverse Proxy"
}

# The reverse-proxy is inserted before our app-servers so requests go directly to the reverse-proxy.
{
    "diagramStep" : "reverse-proxy",
    "focus" : "Reverse Proxy",
    "focusPaths" : [
        ["Anna", "Phone Web Browser", "Phone", "Internet", "Reverse Proxy"],
        ["You", "Web Browser", "Laptop", "Internet", "Reverse Proxy"],
        ["Pinky", "Tablet Web Browser", "Tablet", "Internet", "Reverse Proxy"]
    ]
}

# The reverse proxy runs its own web server software program.
{
    "diagramStep" : "reverse-proxy-web-server",
    "focus" : "reverse-proxy-web-server"
}

# The web server on the reverse proxy server is configured to route requests to other servers.
{
    "diagramStep" : "reverse-proxy-web-server",
    "focusPaths" : [
        ["reverse-proxy-web-server", "Server"],
        ["reverse-proxy-web-server", "Server (clone 1)"],
        ["reverse-proxy-web-server", "Server (clone 2)"]
    ]
}

Find out more here: <a href="http://stackoverflow.com/a/366212/101940">http://stackoverflow.com/a/366212/101940</a>.



# Using many small application servers is known as scaling horizontally.
{
    "diagramStep" : "reverse-proxy-web-server",
    "focus" : ["Server", "Server (clone 1)", "Server (clone 2)"],
    "focusPaths" : [
        ["Anna", "Phone Web Browser", "Phone", "Internet", "Reverse Proxy", "reverse-proxy-web-server", "Server"],
        ["You", "Web Browser", "Laptop", "Internet", "Reverse Proxy", "reverse-proxy-web-server", "Server (clone 1)"],
        ["Pinky", "Tablet Web Browser", "Tablet", "Internet", "Reverse Proxy", "reverse-proxy-web-server", "Server (clone 2)"]
    ]
}

# Scaling horizontally is usually cost effective -- it's cheaper to buy many commodity servers than a few powerful servers.
{
    "diagramStep" : "reverse-proxy-web-server"
}


# Scaling horizontally mitigates risk.
{
    "diagramStep" : "reverse-proxy-web-server",
    "crossOut" : ["Server"],
    "disable" : ["Web Server", "Application", "Templates", "Filesystem"]
}

# Many servers means some can fail and the others will pick up the load.
{
    "diagramStep" : "reverse-proxy-web-server",
    "focusPaths" : [
        ["Anna", "Phone Web Browser", "Phone", "Internet", "Reverse Proxy", "reverse-proxy-web-server", "Server (clone 1)"],
        ["You", "Web Browser", "Laptop", "Internet", "Reverse Proxy", "reverse-proxy-web-server", "Server (clone 1)"],
        ["Pinky", "Tablet Web Browser", "Tablet", "Internet", "Reverse Proxy", "reverse-proxy-web-server", "Server (clone 2)"]
    ]
    ,
    "crossOut" : ["Server"],
    "disable" : ["Web Server", "Application", "Templates", "Filesystem"]
}


# A centralized database server maintains data integrity across application servers.
{
    "diagramStep" : "reverse-proxy-web-server",
    "focus" : ["Database Server"],
    "focusPaths" : [
        ["Application", "Database Server"],
        ["App clone 1", "Database Server"],
        ["App clone 2", "Database Server"]
    ]
}

# This solves the case where a user's request will be handled by app1 first, then another request by the same user is handled by app2. 
{
    "diagramStep" : "reverse-proxy-web-server",
    "focus" : ["Database Server"],
    "focusPaths" : [
        ["Server", "Web Server", "Application", "Database Server"],
        ["Server (clone 1)", "Web Server clone 1", "App clone 1", "Database Server"],
        ["Server (clone 2)", "Web Server clone 2", "App clone 2", "Database Server"]
    ]
}


# The end
{
    "diagramStep" : "reverse-proxy-web-server",
    "focus" : ["You"]
}

This is a basic walkthrough, but it is indeed how modern web applications generally work!
I'll try to add more concepts over time and feel free to provide feedback or ask questions about the material by tweeting  <a href="http://twitter.com/plusjade" target="_blanks">@plusjade</a> or emailing <a href="mailto:plusjade@gmail.com">plusjade@gmail.com</a> - Thanks!
